#!/usr/bin/env node

/**
 * Module dependencies.
 */

//NOTE cargo dotenv antes de que se cargue app
require('dotenv').config();
const socketIo = require('socket.io');

var app = require('../app');
var debug = require('debug')('wookiemarket-backend:server');
var http = require('http');
const { Advert } = require('../models');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: process.env.CORS_ORIGIN,
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
    optionsSuccessStatus: 200,
  },
});

// Configura Socket.io para escuchar cambios en la base de datos
io.on('connection', socket => {
  console.log('Cliente conectado');

  // Cuando un cliente se conecta, se une a una sala específica
  socket.join('anuncios');

  // Escucha cambios en el campo "price" de la base de datos y emite notificaciones a la sala
  Advert.watch().on('change', change => {
    if (
      change.operationType === 'update' &&
      change.updateDescription.updatedFields.hasOwnProperty('price')
    ) {
      // Emitir notificación cuando se actualiza el campo "price" de un anuncio
      io.to('anuncios').emit('priceActualizado', {
        advertId: change.documentKey._id,
      });
      console.log('Precio actualizado:', change.documentKey._id);
    }
  });

  socket.on('disconnect', () => {
    console.log('Cliente desconectado');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
